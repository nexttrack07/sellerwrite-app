/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedAnalyzeImport } from './routes/_protected/analyze'
import { Route as ProtectedListingsIndexImport } from './routes/_protected/listings/index'
import { Route as ProtectedListingsCreateImport } from './routes/_protected/listings/create'
import { Route as ProtectedListingsIdImport } from './routes/_protected/listings/$id'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedAnalyzeRoute = ProtectedAnalyzeImport.update({
  id: '/analyze',
  path: '/analyze',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedListingsIndexRoute = ProtectedListingsIndexImport.update({
  id: '/listings/',
  path: '/listings/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedListingsCreateRoute = ProtectedListingsCreateImport.update({
  id: '/listings/create',
  path: '/listings/create',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedListingsIdRoute = ProtectedListingsIdImport.update({
  id: '/listings/$id',
  path: '/listings/$id',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_protected/analyze': {
      id: '/_protected/analyze'
      path: '/analyze'
      fullPath: '/analyze'
      preLoaderRoute: typeof ProtectedAnalyzeImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/listings/$id': {
      id: '/_protected/listings/$id'
      path: '/listings/$id'
      fullPath: '/listings/$id'
      preLoaderRoute: typeof ProtectedListingsIdImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/listings/create': {
      id: '/_protected/listings/create'
      path: '/listings/create'
      fullPath: '/listings/create'
      preLoaderRoute: typeof ProtectedListingsCreateImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/listings/': {
      id: '/_protected/listings/'
      path: '/listings'
      fullPath: '/listings'
      preLoaderRoute: typeof ProtectedListingsIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedAnalyzeRoute: typeof ProtectedAnalyzeRoute
  ProtectedListingsIdRoute: typeof ProtectedListingsIdRoute
  ProtectedListingsCreateRoute: typeof ProtectedListingsCreateRoute
  ProtectedListingsIndexRoute: typeof ProtectedListingsIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedAnalyzeRoute: ProtectedAnalyzeRoute,
  ProtectedListingsIdRoute: ProtectedListingsIdRoute,
  ProtectedListingsCreateRoute: ProtectedListingsCreateRoute,
  ProtectedListingsIndexRoute: ProtectedListingsIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/analyze': typeof ProtectedAnalyzeRoute
  '/listings/$id': typeof ProtectedListingsIdRoute
  '/listings/create': typeof ProtectedListingsCreateRoute
  '/listings': typeof ProtectedListingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/analyze': typeof ProtectedAnalyzeRoute
  '/listings/$id': typeof ProtectedListingsIdRoute
  '/listings/create': typeof ProtectedListingsCreateRoute
  '/listings': typeof ProtectedListingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_protected/analyze': typeof ProtectedAnalyzeRoute
  '/_protected/listings/$id': typeof ProtectedListingsIdRoute
  '/_protected/listings/create': typeof ProtectedListingsCreateRoute
  '/_protected/listings/': typeof ProtectedListingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/analyze'
    | '/listings/$id'
    | '/listings/create'
    | '/listings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/analyze'
    | '/listings/$id'
    | '/listings/create'
    | '/listings'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_protected/analyze'
    | '/_protected/listings/$id'
    | '/_protected/listings/create'
    | '/_protected/listings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRoute: typeof ProtectedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRoute: ProtectedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/analyze",
        "/_protected/listings/$id",
        "/_protected/listings/create",
        "/_protected/listings/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_protected/analyze": {
      "filePath": "_protected/analyze.tsx",
      "parent": "/_protected"
    },
    "/_protected/listings/$id": {
      "filePath": "_protected/listings/$id.tsx",
      "parent": "/_protected"
    },
    "/_protected/listings/create": {
      "filePath": "_protected/listings/create.tsx",
      "parent": "/_protected"
    },
    "/_protected/listings/": {
      "filePath": "_protected/listings/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
